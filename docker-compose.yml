services:
  invoice-db:
    image: postgres:16
    container_name: invoice-db
    environment:
      POSTGRES_DB: ${DB_NAME_INVOICE}
      POSTGRES_USER: ${DB_USERNAME_INVOICE}
      POSTGRES_PASSWORD: ${DB_PASSWORD_INVOICE}
    ports:
      - "5433:5432"
    volumes:
      - invoice-db-data:/var/lib/postgresql/data
    networks:
      - backend


  user-db:
    image: postgres:16
    container_name: user-db
    environment:
      POSTGRES_DB: ${DB_NAME_USER}
      POSTGRES_USER: ${DB_USERNAME_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD_USER}
    ports:
      - "5434:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - backend

  notification-db:
    image: postgres:15
    container_name: notification-db
    environment:
      POSTGRES_DB: notification_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - backend

  user-management-service:
    build:
      context: ./user-management
      dockerfile: Dockerfile
    container_name: user-management-service
    depends_on:
      - user-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/${DB_NAME_USER}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD_USER}
      SPRING_APPLICATION_NAME: user-management-service
      SERVER_PORT: 8080
    ports:
      - "8081:8080"
    networks:
      - backend

  invoice-service:
    build:
      context: ./invoice
      dockerfile: Dockerfile
    container_name: invoice-service
    depends_on:
      - invoice-db
      - user-management-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://invoice-db:5432/${DB_NAME_INVOICE}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME_INVOICE}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD_INVOICE}
      USER_MANAGEMENT_URL: http://user-management-service:8080
      SPRING_APPLICATION_NAME: invoice-service
      SERVER_PORT: 8080
    ports:
      - "8082:8080"
    networks:
      - backend

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      - notification-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notification-db:5435/notification
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_APPLICATION_NAME: notification-service
      SERVER_PORT: 8080
    ports:
      - "8083:8080"
    networks:
      - backend

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      #      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000



networks:
  backend:
    driver: bridge

volumes:
  invoice-db-data:
  user-db-data:
  notification-db-data: